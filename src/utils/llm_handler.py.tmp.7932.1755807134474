import openai
import os
from typing import List, Dict
from dotenv import load_dotenv

load_dotenv()

class LLMHandler:
    def __init__(self):
        self.client = openai.OpenAI(api_key=os.getenv("OPENAI_API_KEY"))
        self.system_prompt = self._get_system_prompt()
    
    def _get_system_prompt(self) -> str:
        """Get the system prompt for PRD generation"""
        return """You are an expert Product Requirements Document (PRD) generator specializing in two-tier PRD creation. Your role is to help project managers, product owners, and stakeholders create comprehensive PRDs that serve as the single source of truth throughout the product development process.

TWO-TIER PRD SYSTEM:

1. **PRODUCT-LEVEL PRD** - Master reference document containing:
   - Product vision, technical stack, security measures, architecture
   - Product-wide requirements and high-level features
   - Serves as foundation for all Epic-Level PRDs

2. **EPIC-LEVEL PRD** - Detailed documents for specific Jira epics that:
   - Inherit relevant master-level details from Product-Level PRD
   - Focus on specific feature sets or user stories
   - Link directly to Jira epics for development tracking

Key guidelines for PRD generation:
1. Create detailed, comprehensive documents with ACTUAL CONTENT, not overviews or placeholders
2. Provide specific, actionable requirements that development teams can implement
3. Include concrete technical specifications, user stories, acceptance criteria, and implementation details
4. Always write detailed content for each section - never use phrases like "Specify the...", "Outline the...", "Detail the..."
5. Provide real examples, specific technologies, actual requirements, and measurable criteria
6. Focus on implementable details that serve as the single source of truth for development

PRODUCT-LEVEL PRD Template:
1. **Product Overview & Vision**
   - Product mission and strategic vision
   - Market analysis and competitive landscape
   - Target audience and user personas
   - Problem statement and high-level solution

2. **Technical Architecture**
   - Technology stack and platform decisions
   - System architecture overview
   - Infrastructure requirements
   - Integration architecture

3. **Security & Compliance**
   - Security framework and measures
   - Data protection requirements
   - Compliance standards (GDPR, SOC2, etc.)
   - Authentication and authorization

4. **Product-Wide Requirements**
   - Cross-cutting functional requirements
   - Non-functional requirements (performance, scalability)
   - Quality attributes and constraints
   - Platform and browser support

5. **Epic Roadmap**
   - High-level feature categories
   - Epic prioritization and dependencies
   - Release planning and milestones

EPIC-LEVEL PRD Template:
1. **Epic Overview**
   - Epic title and Jira epic key
   - Link to parent Product-Level PRD
   - Epic goals and business value

2. **Inherited Context** (from Product-Level PRD)
   - Relevant technical stack components
   - Applicable security measures
   - Architecture considerations

3. **Detailed Features**
   - Specific user stories and scenarios
   - Detailed acceptance criteria
   - Feature specifications and wireframes

4. **Implementation Requirements**
   - Technical implementation details
   - API specifications
   - Database schema changes
   - Third-party integrations

5. **Testing Strategy**
   - Test cases and scenarios
   - Performance testing requirements
   - Security testing considerations

6. **Definition of Done**
   - Completion criteria
   - Quality gates
   - Deployment requirements

Always ask clarifying questions if the user input lacks sufficient detail for any section."""

    def generate_prd(self, user_input: str, context: str = "") -> str:
        """Generate a PRD based on user input"""
        messages = [
            {"role": "system", "content": self.system_prompt},
        ]
        
        if context:
            messages.append({"role": "assistant", "content": f"Previous context: {context}"})
        
        messages.append({
            "role": "user", 
            "content": f"Please generate a comprehensive Product Requirements Document based on this input: {user_input}"
        })
        
        try:
            response = self.client.chat.completions.create(
                model="gpt-3.5-turbo",
                messages=messages,
                max_tokens=3000,
                temperature=0.3
            )
            return response.choices[0].message.content
        except Exception as e:
            return f"Error generating PRD: {str(e)}"
    
    def chat_with_prd(self, user_message: str, prd_content: str, chat_history: List[Dict]) -> str:
        """Chat about an existing PRD for iterations"""
        messages = [
            {"role": "system", "content": f"""You are helping to iterate and improve a Product Requirements Document. 
            
Current PRD Content:
{prd_content}

Guidelines:
- Help users refine, expand, or modify sections of the PRD
- Suggest improvements based on best practices
- Answer questions about the PRD content
- Maintain the PRD structure and quality
- Be specific and actionable in your suggestions"""},
        ]
        
        # Add chat history
        for msg in chat_history[-10:]:  # Keep last 10 messages for context
            messages.append(msg)
        
        messages.append({"role": "user", "content": user_message})
        
        try:
            response = self.client.chat.completions.create(
                model="gpt-3.5-turbo",
                messages=messages,
                max_tokens=1500,
                temperature=0.4
            )
            return response.choices[0].message.content
        except Exception as e:
            return f"Error in chat: {str(e)}"
    
    def suggest_improvements(self, prd_content: str, approved_prds: List[str]) -> str:
        """Suggest improvements based on approved PRDs"""
        if not approved_prds:
            return "No approved PRDs available for comparison."
        
        # Sample a few approved PRDs for context
        sample_prds = approved_prds[:3] if len(approved_prds) > 3 else approved_prds
        approved_context = "\n\n---\n\n".join(sample_prds)
        
        messages = [
            {"role": "system", "content": f"""Analyze the current PRD against these approved, high-quality PRDs and suggest specific improvements:

Approved PRDs for reference:
{approved_context}

Provide specific, actionable suggestions to improve the current PRD based on best practices from the approved examples."""},
            {"role": "user", "content": f"Current PRD to improve:\n{prd_content}"}
        ]
        
        try:
            response = self.client.chat.completions.create(
                model="gpt-3.5-turbo",
                messages=messages,
                max_tokens=1000,
                temperature=0.3
            )
            return response.choices[0].message.content
        except Exception as e:
            return f"Error generating suggestions: {str(e)}"
    
    def generate_product_level_prd(self, user_input: str, technical_stack: str = "", 
                                 security_measures: str = "", architecture_overview: str = "") -> str:
        """Generate a Product-Level PRD"""
        messages = [
            {"role": "system", "content": self.system_prompt + """
            
FOCUS: Generate a PRODUCT-LEVEL PRD following the Product-Level PRD template.
This should be a master reference document that captures the product vision, technical stack, security measures, and architecture."""},
        ]
        
        context_parts = []
        if technical_stack:
            context_parts.append(f"Technical Stack: {technical_stack}")
        if security_measures:
            context_parts.append(f"Security Measures: {security_measures}")
        if architecture_overview:
            context_parts.append(f"Architecture Overview: {architecture_overview}")
        
        context = "\n".join(context_parts) if context_parts else ""
        
        prompt = f"Please generate a comprehensive Product-Level PRD based on this input: {user_input}"
        if context:
            prompt += f"\n\nAdditional context:\n{context}"
        
        messages.append({"role": "user", "content": prompt})
        
        try:
            response = self.client.chat.completions.create(
                model="gpt-3.5-turbo",
                messages=messages,
                max_tokens=3500,
                temperature=0.3
            )
            return response.choices[0].message.content
        except Exception as e:
            return f"Error generating Product-Level PRD: {str(e)}"
    
    def generate_epic_level_prd(self, user_input: str, parent_prd_content: str, 
                              jira_epic_key: str = "") -> str:
        """Generate an Epic-Level PRD that inherits from a Product-Level PRD"""
        messages = [
            {"role": "system", "content": self.system_prompt + f"""
            
FOCUS: Generate an EPIC-LEVEL PRD following the Epic-Level PRD template.
This should be a detailed PRD for a specific Jira epic that inherits relevant details from the parent Product-Level PRD.

PARENT PRODUCT-LEVEL PRD CONTENT:
{parent_prd_content}

Instructions:
1. Reference and inherit relevant technical stack, security measures, and architecture from the parent PRD
2. Focus on the specific epic requirements and features
3. Provide detailed implementation guidance for dev, design, and test teams"""},
        ]
        
        prompt = f"Please generate a detailed Epic-Level PRD based on this input: {user_input}"
        if jira_epic_key:
            prompt += f"\n\nJira Epic Key: {jira_epic_key}"
        
        messages.append({"role": "user", "content": prompt})
        
        try:
            response = self.client.chat.completions.create(
                model="gpt-3.5-turbo",
                messages=messages,
                max_tokens=3000,
                temperature=0.3
            )
            return response.choices[0].message.content
        except Exception as e:
            return f"Error generating Epic-Level PRD: {str(e)}"